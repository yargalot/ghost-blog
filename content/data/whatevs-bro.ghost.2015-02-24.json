{"meta":{"exported_on":1424747251120,"version":"002"},"data":{"posts":[{"id":2,"uuid":"19a086db-01f4-47c3-a1ab-f73d8425e16e","title":"AutoGate, Angular and Responsive","slug":"autogate-angular-and-responsive","markdown":"## An overview\nA few months ago, carsales set out on one of its most ambitious projects in sometime. For us, [AutoGate](http://www.datamotive.com.au/autogate/) has been one of our underpinning products for the company as its the first point of contact for our Dealer base to upload their inventory for consumers to browse online then hopefully buy. Running two systems, one for cars (normal web) and then one for everything else (built in flex) has been an overhead which has strained the company and the team for a while. So as in all things we decided to rebuild it.\n\nIt had a few objectives:\n- Combine the two AutoGates\n- Making ease of use a priority\n- Work on any device and anywhere (like in a caryard)\n- Fast and responsive\n- Multilingual\n\nAfter a lot of deliberation and a few false starts we decided to use Angular.js as the front end framework, grails as the middleman which would then connect to elasticsearch and oracle.\n\nWe went with Angular for a few reasons:\n- We had been using it on a small scale for some other projects for a while so we had proven it in production already\n- Code maintenance was lightyears easier than jQuery\n- The framework itself was not as opinionated as [other frameworks](http://emberjs.com/), which helped the team fit it into its own vision\n- Getting started in it was quick\n\nThe little issues (such as sub urls and routing, everything in the DOM is watched) we found along the way were interesting to say the least, however the transition has been worth it.\n\n## The front end\nThe front end sat in an individual git repository which was then submoduled into other projects as required. This allows the same patterns to be repeated globally, ensure bug fixes related to ui issues can deployed into related projects quickly and helps with not having to start a new project from scratch when we need to bootstrap a product. Tags would then be used to mark as versions.\n\nAs an overview the front end stack is:\n\n- [Grunt.js](http://gruntjs.com/) for build\n- [Bower](http://bower.io/) for dependency management\n- [LessCSS](http://lesscss.org/) for css pre compilation with [AutoPrefixr](https://github.com/ai/autoprefixer)\n- [Jade](http://jade-lang.com/) for building out the site skeleton\n- Ripping certain patterns out of the [Bootstrap](http://getbootstrap.com/) project\n- [Angular.js](http://angularjs.org/) integration\n- Using [KSS](http://warpspire.com/kss/styleguides/) to generate a style guide which could then be tested via [Wraith](https://github.com/BBC-News/wraith) at a css pattern level to determine breaking changes\n- The methodology would be using OOCSS at a level of patterns > modules > skins.\n\nSo as we went along, the design changed a bit, but because of the set up the project would not need to change much on the whole. This allowed for us to rapidly change things as needed.\n\n## What the post is actually about\nWhat I personally underestimated though was the responsive front end. The new grid in bootstrap 3 was streets ahead of the BS2 version, which we adopted fairly early in the pre release versions of v3 bootstrap. However it doesn't (and really cant) solve problems related to smaller resolutions.\n\n![Mobile vs Desktop Autogate listing page](/content/images/2014/Jul/ag-example.jpg)\n\nThe problem mainly has been the HTML. Working around responsive patterns using the same hierarchy as other displays is tedious. Its ends up being easier for developers to use a adaptive approach because the sites generate two different sets of html. At that point however, people will just build the sites out as two differing products rather than a singular one.\n\nOf course, We didn't do this. Because **#yolo** right.\n\nMobile first can be a great thing (for marketers and [buzz word enthusiasts](http://www.languagemonitor.com/top-words-2/top-50-business-buzzwords-of-2013/)), however it doesn't really work when you need to make a product for IE7 and up. (I also think making things for \"Mobile devices first\" is an overly simplistic view of a bigger problem). Usually this just relates to resolution and changing patterns and page layout based on that.\n\nPatterns can and should change based of touch then resolution of the area of the element, not just the whole window (a failing of the current implementation of media queries, [which other people see as well](http://ianstormtaylor.com/media-queries-are-a-hack/)).\n\nIf your using making a responsive site, tying elements display into the resolution of the whole page limits you somewhat to make patterns repeatable. Things like [Polymer](http://www.polymer-project.org/) and using the shadow DOM could fix this to some degree in the future, but for now we can fix that via angular.\n\n## Get to the point\nSo Angular has this thing called the [Switch](http://docs.angularjs.org/api/ng/directive/ngSwitch) statement, which will let you change the layout based on a variable you pass to it. So if I pass a boolean variable there, the layout will change based on whether its true or false. Which is super handy for responsive design simply because it _could_ change the html completely depending which area its in right? So if we made a service called [resolution service](https://gist.github.com/yargalot/6418427).\n\n```javascript\n/* Display Services */\n\nangular.module('Display.services', [ 'ngResource' ])\n.factory('ResolutionService', ['$window', '$rootScope', function(win, rootScope) {\n\n  // Init Object\n  var displayOptions = {};\n\n  // Resolution breakpoints\n  displayOptions.tinyScreen   = 480;\n  displayOptions.smallScreen  = 768;\n  displayOptions.mediumScreen = 992;\n  displayOptions.largeScreen  = 1200;\n\n  // Device Pixel Density for Photos\n  displayOptions.pixelRatio   = win.devicePixelRatio > 1;\n\n  // Device Resolution (Falsy)\n  displayOptions.resolutionInit = function() {\n    displayOptions.tinyResolution     = win.outerWidth <=  displayOptions.tinyScreen;\n    displayOptions.smallResolution    = win.outerWidth >   displayOptions.tinyScreen   && win.outerWidth <= displayOptions.smallScreen;\n    displayOptions.mediumResolution   = win.outerWidth >   displayOptions.smallScreen  && win.outerWidth <= displayOptions.mediumScreen;\n    displayOptions.largeResolution    = win.outerWidth >   displayOptions.mediumScreen && win.outerWidth <= displayOptions.largeScreen;\n    displayOptions.massiveResolution  = win.outerWidth >   displayOptions.largeScreen;\n\n    rootScope.$broadcast('resolutionServiceChange');\n  };\n\n  var windowChange = _.debounce(displayOptions.resolutionInit, 300);\n\n  displayOptions.resolutionInit();\n  window.onresize = windowChange;\n\n  return displayOptions;\n}]);\n\n```\n\n**Note:** The breakpoints in this are the same as in bootstrap, which you can inject in the less and have them pull from the same file somewhere else in the angular controller.\n\n\nInjecting that into our controller and assigning that to the scope\n\n```javascript\nMainController.$inject = [ '$scope', 'ResolutionService'];\n\nfunction MainController(scope, resolutionService) {\n  scope.tinyResolution = resolutionService.tinyResolution;\n  scope.smallResolution = resolutionService.smallResolution;\n  scope.mediumResolution = resolutionService.mediumResolution;\n}\n```\n\nwe can then directly access that in the DOM. So in our layout:\n\n```html\n<section class=\"area-content\" ng-switch=\"tinyResolution\">\n\t<table class=\"table table-listing\" ng-switch-when=\"false\"></table>\n\t<ul class=\"listing-grid\" ng-switch-when=\"true\"></ul>\n</section>\n```\n\nWhich is in our listing page, since really, the use case for listings at different resolutions requires different implementations. We can still use the same scope variables without having to saturate the DOM by producing two different layouts and just hiding one at different resolutions.\n\nSo if we use touch as well, we could change the layout at different resolutions and for it for touch. So if we assign ```Modernizr.touch``` to the scope we could then have:\n\n```html\n<section class=\"area-content\" ng-switch=\"tinyResolution\">\n\t<table class=\"table table-listing\" ng-switch-when=\"false\"></table>\n\t<ul class=\"listing-grid\" ng-switch-when=\"true\" ng-switch=\"touch\">\n\t\t<li ng-switch-when=\"true\"><templateLink></li>\n\t\t<li ng-switch-when=\"false\"><templateLink></li>\n\t</ul>\n</section>\n```\nor\n```html\n<section class=\"area-content\" ng-switch=\"tinyResolution && touch\">\n\t<table class=\"table table-listing\" ng-switch-when=\"false\"></table>\n\t<ul class=\"listing-grid\" ng-switch-when=\"true\">\n\t</ul>\n</section>\n```\n\nproducing what we need. This will keep the DOM clean and not referencing the scope or killing it with watches for multiple items.\n\nUsing this technique we have been able to manage AG Mobile easily while keeping it all in the same system. Even if we were to change the layout for touch devices, it won't affect the other devices / resolution breakpoints.\n\n## The element resolution problem\n\nThis doesn't solve the problem I was getting at earlier, but its a start in the right direction. So can we solve that via angular? We could put a list of breakpoints where we need to change the innards like so:\n\n```html\n<listing></listing>\n```\n\n```javascript\n.directive('listing', ['$timeout', function(timeout){\n  // Runs during compile\n  return {\n    scope: {},\n    restrict: 'E',\n    template: '<div class=\"listing\" ng-switch=\"resolution\"><table ng-switch-when=\"false\"></table><ul ng-switch-when=\"true\"></ul></div>',\n    link: function(scope, element, attrs) {\n      var breakpointClass=\"breaking\"\n\n      // Lets use a random breakpoint for out layout\n      scope.resolution = element.width() > 410;\n\n      if (scope.resolution) {\n        element.addClass(breakpointClass)\n      } else {\n        element.removeClass(breakpointClass)\n      }\n\n    }\n  };\n}])\n\n```\nat which point this really starts looking like [Polymers](http://www.polymer-project.org/) and shadow dom stuff. However CSS and HTML don't support this natively, at which point we have to use classes to change the css, and js to change the html structure (like the directive above). It seems like a massive failing. The ```ng-switch``` statement actually looks like it could be a viable solution, even for native html.\n\n\n```css\n/* this would be nice */\n.listing (max-width: 480px) {\n  .image {\n    display:none;\n  }\n}\n\n```\n\n\n\n## What to take from this\nApart from the rant nearing the end, using angular services to determine the layout of the page in certain conditions works well, but it points to a few problems that are inherit with current layout technology in browsers. Hopefully one day it will be fixed, but there are always ways around different problems and this was our solution for the moment.\n","html":"<h2 id=\"anoverview\">An overview</h2>\n\n<p>A few months ago, carsales set out on one of its most ambitious projects in sometime. For us, <a href=\"http://www.datamotive.com.au/autogate/\">AutoGate</a> has been one of our underpinning products for the company as its the first point of contact for our Dealer base to upload their inventory for consumers to browse online then hopefully buy. Running two systems, one for cars (normal web) and then one for everything else (built in flex) has been an overhead which has strained the company and the team for a while. So as in all things we decided to rebuild it.</p>\n\n<p>It had a few objectives: <br />\n- Combine the two AutoGates\n- Making ease of use a priority\n- Work on any device and anywhere (like in a caryard)\n- Fast and responsive\n- Multilingual</p>\n\n<p>After a lot of deliberation and a few false starts we decided to use Angular.js as the front end framework, grails as the middleman which would then connect to elasticsearch and oracle.</p>\n\n<p>We went with Angular for a few reasons: <br />\n- We had been using it on a small scale for some other projects for a while so we had proven it in production already\n- Code maintenance was lightyears easier than jQuery\n- The framework itself was not as opinionated as <a href=\"http://emberjs.com/\">other frameworks</a>, which helped the team fit it into its own vision\n- Getting started in it was quick</p>\n\n<p>The little issues (such as sub urls and routing, everything in the DOM is watched) we found along the way were interesting to say the least, however the transition has been worth it.</p>\n\n<h2 id=\"thefrontend\">The front end</h2>\n\n<p>The front end sat in an individual git repository which was then submoduled into other projects as required. This allows the same patterns to be repeated globally, ensure bug fixes related to ui issues can deployed into related projects quickly and helps with not having to start a new project from scratch when we need to bootstrap a product. Tags would then be used to mark as versions.</p>\n\n<p>As an overview the front end stack is:</p>\n\n<ul>\n<li><a href=\"http://gruntjs.com/\">Grunt.js</a> for build</li>\n<li><a href=\"http://bower.io/\">Bower</a> for dependency management</li>\n<li><a href=\"http://lesscss.org/\">LessCSS</a> for css pre compilation with <a href=\"https://github.com/ai/autoprefixer\">AutoPrefixr</a></li>\n<li><a href=\"http://jade-lang.com/\">Jade</a> for building out the site skeleton</li>\n<li>Ripping certain patterns out of the <a href=\"http://getbootstrap.com/\">Bootstrap</a> project</li>\n<li><a href=\"http://angularjs.org/\">Angular.js</a> integration</li>\n<li>Using <a href=\"http://warpspire.com/kss/styleguides/\">KSS</a> to generate a style guide which could then be tested via <a href=\"https://github.com/BBC-News/wraith\">Wraith</a> at a css pattern level to determine breaking changes</li>\n<li>The methodology would be using OOCSS at a level of patterns > modules > skins.</li>\n</ul>\n\n<p>So as we went along, the design changed a bit, but because of the set up the project would not need to change much on the whole. This allowed for us to rapidly change things as needed.</p>\n\n<h2 id=\"whatthepostisactuallyabout\">What the post is actually about</h2>\n\n<p>What I personally underestimated though was the responsive front end. The new grid in bootstrap 3 was streets ahead of the BS2 version, which we adopted fairly early in the pre release versions of v3 bootstrap. However it doesn't (and really cant) solve problems related to smaller resolutions.</p>\n\n<p><img src=\"/content/images/2014/Jul/ag-example.jpg\" alt=\"Mobile vs Desktop Autogate listing page\" /></p>\n\n<p>The problem mainly has been the HTML. Working around responsive patterns using the same hierarchy as other displays is tedious. Its ends up being easier for developers to use a adaptive approach because the sites generate two different sets of html. At that point however, people will just build the sites out as two differing products rather than a singular one.</p>\n\n<p>Of course, We didn't do this. Because <strong>#yolo</strong> right.</p>\n\n<p>Mobile first can be a great thing (for marketers and <a href=\"http://www.languagemonitor.com/top-words-2/top-50-business-buzzwords-of-2013/\">buzz word enthusiasts</a>), however it doesn't really work when you need to make a product for IE7 and up. (I also think making things for \"Mobile devices first\" is an overly simplistic view of a bigger problem). Usually this just relates to resolution and changing patterns and page layout based on that.</p>\n\n<p>Patterns can and should change based of touch then resolution of the area of the element, not just the whole window (a failing of the current implementation of media queries, <a href=\"http://ianstormtaylor.com/media-queries-are-a-hack/\">which other people see as well</a>).</p>\n\n<p>If your using making a responsive site, tying elements display into the resolution of the whole page limits you somewhat to make patterns repeatable. Things like <a href=\"http://www.polymer-project.org/\">Polymer</a> and using the shadow DOM could fix this to some degree in the future, but for now we can fix that via angular.</p>\n\n<h2 id=\"gettothepoint\">Get to the point</h2>\n\n<p>So Angular has this thing called the <a href=\"http://docs.angularjs.org/api/ng/directive/ngSwitch\">Switch</a> statement, which will let you change the layout based on a variable you pass to it. So if I pass a boolean variable there, the layout will change based on whether its true or false. Which is super handy for responsive design simply because it <em>could</em> change the html completely depending which area its in right? So if we made a service called <a href=\"https://gist.github.com/yargalot/6418427\">resolution service</a>.</p>\n\n<pre><code class=\"javascript\">/* Display Services */\n\nangular.module('Display.services', [ 'ngResource' ])  \n.factory('ResolutionService', ['$window', '$rootScope', function(win, rootScope) {\n\n  // Init Object\n  var displayOptions = {};\n\n  // Resolution breakpoints\n  displayOptions.tinyScreen   = 480;\n  displayOptions.smallScreen  = 768;\n  displayOptions.mediumScreen = 992;\n  displayOptions.largeScreen  = 1200;\n\n  // Device Pixel Density for Photos\n  displayOptions.pixelRatio   = win.devicePixelRatio &gt; 1;\n\n  // Device Resolution (Falsy)\n  displayOptions.resolutionInit = function() {\n    displayOptions.tinyResolution     = win.outerWidth &lt;=  displayOptions.tinyScreen;\n    displayOptions.smallResolution    = win.outerWidth &gt;   displayOptions.tinyScreen   &amp;&amp; win.outerWidth &lt;= displayOptions.smallScreen;\n    displayOptions.mediumResolution   = win.outerWidth &gt;   displayOptions.smallScreen  &amp;&amp; win.outerWidth &lt;= displayOptions.mediumScreen;\n    displayOptions.largeResolution    = win.outerWidth &gt;   displayOptions.mediumScreen &amp;&amp; win.outerWidth &lt;= displayOptions.largeScreen;\n    displayOptions.massiveResolution  = win.outerWidth &gt;   displayOptions.largeScreen;\n\n    rootScope.$broadcast('resolutionServiceChange');\n  };\n\n  var windowChange = _.debounce(displayOptions.resolutionInit, 300);\n\n  displayOptions.resolutionInit();\n  window.onresize = windowChange;\n\n  return displayOptions;\n}]);\n</code></pre>\n\n<p><strong>Note:</strong> The breakpoints in this are the same as in bootstrap, which you can inject in the less and have them pull from the same file somewhere else in the angular controller.</p>\n\n<p>Injecting that into our controller and assigning that to the scope</p>\n\n<pre><code class=\"javascript\">MainController.$inject = [ '$scope', 'ResolutionService'];\n\nfunction MainController(scope, resolutionService) {  \n  scope.tinyResolution = resolutionService.tinyResolution;\n  scope.smallResolution = resolutionService.smallResolution;\n  scope.mediumResolution = resolutionService.mediumResolution;\n}\n</code></pre>\n\n<p>we can then directly access that in the DOM. So in our layout:</p>\n\n<pre><code class=\"html\">&lt;section class=\"area-content\" ng-switch=\"tinyResolution\"&gt;  \n    &lt;table class=\"table table-listing\" ng-switch-when=\"false\"&gt;&lt;/table&gt;\n    &lt;ul class=\"listing-grid\" ng-switch-when=\"true\"&gt;&lt;/ul&gt;\n&lt;/section&gt;  \n</code></pre>\n\n<p>Which is in our listing page, since really, the use case for listings at different resolutions requires different implementations. We can still use the same scope variables without having to saturate the DOM by producing two different layouts and just hiding one at different resolutions.</p>\n\n<p>So if we use touch as well, we could change the layout at different resolutions and for it for touch. So if we assign <code>Modernizr.touch</code> to the scope we could then have:</p>\n\n<pre><code class=\"html\">&lt;section class=\"area-content\" ng-switch=\"tinyResolution\"&gt;  \n    &lt;table class=\"table table-listing\" ng-switch-when=\"false\"&gt;&lt;/table&gt;\n    &lt;ul class=\"listing-grid\" ng-switch-when=\"true\" ng-switch=\"touch\"&gt;\n        &lt;li ng-switch-when=\"true\"&gt;&lt;templateLink&gt;&lt;/li&gt;\n        &lt;li ng-switch-when=\"false\"&gt;&lt;templateLink&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/section&gt;  \n</code></pre>\n\n<p>or  </p>\n\n<pre><code class=\"html\">&lt;section class=\"area-content\" ng-switch=\"tinyResolution &amp;&amp; touch\"&gt;  \n    &lt;table class=\"table table-listing\" ng-switch-when=\"false\"&gt;&lt;/table&gt;\n    &lt;ul class=\"listing-grid\" ng-switch-when=\"true\"&gt;\n    &lt;/ul&gt;\n&lt;/section&gt;  \n</code></pre>\n\n<p>producing what we need. This will keep the DOM clean and not referencing the scope or killing it with watches for multiple items.</p>\n\n<p>Using this technique we have been able to manage AG Mobile easily while keeping it all in the same system. Even if we were to change the layout for touch devices, it won't affect the other devices / resolution breakpoints.</p>\n\n<h2 id=\"theelementresolutionproblem\">The element resolution problem</h2>\n\n<p>This doesn't solve the problem I was getting at earlier, but its a start in the right direction. So can we solve that via angular? We could put a list of breakpoints where we need to change the innards like so:</p>\n\n<pre><code class=\"html\">&lt;listing&gt;&lt;/listing&gt;  \n</code></pre>\n\n<pre><code class=\"javascript\">.directive('listing', ['$timeout', function(timeout){\n  // Runs during compile\n  return {\n    scope: {},\n    restrict: 'E',\n    template: '&lt;div class=\"listing\" ng-switch=\"resolution\"&gt;&lt;table ng-switch-when=\"false\"&gt;&lt;/table&gt;&lt;ul ng-switch-when=\"true\"&gt;&lt;/ul&gt;&lt;/div&gt;',\n    link: function(scope, element, attrs) {\n      var breakpointClass=\"breaking\"\n\n      // Lets use a random breakpoint for out layout\n      scope.resolution = element.width() &gt; 410;\n\n      if (scope.resolution) {\n        element.addClass(breakpointClass)\n      } else {\n        element.removeClass(breakpointClass)\n      }\n\n    }\n  };\n}])\n</code></pre>\n\n<p>at which point this really starts looking like <a href=\"http://www.polymer-project.org/\">Polymers</a> and shadow dom stuff. However CSS and HTML don't support this natively, at which point we have to use classes to change the css, and js to change the html structure (like the directive above). It seems like a massive failing. The <code>ng-switch</code> statement actually looks like it could be a viable solution, even for native html.</p>\n\n<pre><code class=\"css\">/* this would be nice */\n.listing (max-width: 480px) {\n  .image {\n    display:none;\n  }\n}\n</code></pre>\n\n<h2 id=\"whattotakefromthis\">What to take from this</h2>\n\n<p>Apart from the rant nearing the end, using angular services to determine the layout of the page in certain conditions works well, but it points to a few problems that are inherit with current layout technology in browsers. Hopefully one day it will be fixed, but there are always ways around different problems and this was our solution for the moment.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1406511867769,"created_by":1,"updated_at":1406639546017,"updated_by":1,"published_at":1406511874285,"published_by":1}],"users":[{"id":1,"uuid":"561953c7-ab5b-4805-ad34-2cfc568a50f0","name":"yargalot","slug":"yargalot","password":"$2a$10$8ZR0KDLBe1D2rMlrHTfIFeNibLc6TEPuRpK12eYYdELpQ.qYv/Ygu","email":"steven.jmiller@gmail.com","image":"//www.gravatar.com/avatar/6f18696575c45699db8d90f3947ea013?d=404","cover":null,"bio":"I really would like a doughnut","website":"steven.jmiller@gmail.com","location":"Melbourne","accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":null,"created_at":1406510455571,"created_by":1,"updated_at":1424740398814,"updated_by":1}],"roles":[{"id":1,"uuid":"7a6cdb81-d03b-4638-94ba-1175310026e1","name":"Administrator","description":"Administrators","created_at":1406505860656,"created_by":1,"updated_at":1406505860656,"updated_by":1},{"id":2,"uuid":"780b50ce-0b4a-473b-9f6c-9cfec7c01e50","name":"Editor","description":"Editors","created_at":1406505860659,"created_by":1,"updated_at":1406505860659,"updated_by":1},{"id":3,"uuid":"561531e4-14c3-46a6-8cf9-b83c295344c2","name":"Author","description":"Authors","created_at":1406505860661,"created_by":1,"updated_at":1406505860661,"updated_by":1}],"roles_users":[{"id":1,"role_id":1,"user_id":1}],"permissions":[{"id":1,"uuid":"dc0f545f-666d-4c5a-835d-806966c4ab21","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1406505860662,"created_by":1,"updated_at":1406505860662,"updated_by":1},{"id":2,"uuid":"18745a47-608f-4807-9137-0ae62b22498d","name":"Remove posts","object_type":"post","action_type":"remove","object_id":null,"created_at":1406505860665,"created_by":1,"updated_at":1406505860665,"updated_by":1},{"id":3,"uuid":"99a4af1f-de2a-421f-a3f8-4222e443f28c","name":"Create posts","object_type":"post","action_type":"create","object_id":null,"created_at":1406505860668,"created_by":1,"updated_at":1406505860668,"updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3}],"sessions":[{"id":"up4RDJ7Gjf9mqTmlaFJ0dHNQ","expires":1424783604791,"sess":"{\"cookie\":{\"originalMaxAge\":43200000,\"expires\":\"2015-02-24T13:13:24.791Z\",\"httpOnly\":true,\"path\":\"/ghost/\"},\"user\":1,\"_csrfSecret\":\"fwvCkU38saDuSxJt7P2AV7bG\"}"}],"settings":[{"id":1,"uuid":"16a77f15-749b-4c8f-9f7b-d76bc9af54f1","key":"databaseVersion","value":"002","type":"core","created_at":1406505860687,"created_by":1,"updated_at":1406505860687,"updated_by":1},{"id":2,"uuid":"e930c9e8-c6a0-411e-9dfa-8a7cf7b6784b","key":"dbHash","value":"fc004ca2-33aa-4a3d-83a0-446f257062aa","type":"core","created_at":1406505860688,"created_by":1,"updated_at":1406505860758,"updated_by":1},{"id":3,"uuid":"d2971d16-6963-45c3-8f11-3b6d352f05de","key":"nextUpdateCheck","value":"1424826800","type":"core","created_at":1406505860688,"created_by":1,"updated_at":1424740400685,"updated_by":1},{"id":4,"uuid":"8f57fb8c-e1d0-42ee-915c-b9e101849494","key":"displayUpdateNotification","value":"0.5.0","type":"core","created_at":1406505860689,"created_by":1,"updated_at":1424740400688,"updated_by":1},{"id":5,"uuid":"5e959268-a41d-4333-96cb-894df411bfbf","key":"title","value":"Whatevs bro","type":"blog","created_at":1406505860689,"created_by":1,"updated_at":1406639679888,"updated_by":1},{"id":6,"uuid":"8afa14d7-35ea-4cfe-8406-f5eb22d5d5f6","key":"description","value":"Ramblings of a front end developer","type":"blog","created_at":1406505860689,"created_by":1,"updated_at":1406639679891,"updated_by":1},{"id":7,"uuid":"e7272c71-4ea9-4e47-9989-de1b25311bed","key":"email","value":"steven.jmiller@gmail.com","type":"blog","created_at":1406505860689,"created_by":1,"updated_at":1406639679895,"updated_by":1},{"id":8,"uuid":"3ec15a22-e755-4e4f-97b5-2058c6f3c705","key":"logo","value":"","type":"blog","created_at":1406505860690,"created_by":1,"updated_at":1406639679898,"updated_by":1},{"id":9,"uuid":"abbc5873-857a-4247-afa8-3f3002f8ceeb","key":"cover","value":"/content/images/2014/Jul/1277246_10151965375286495_2116528985_o.jpg","type":"blog","created_at":1406505860691,"created_by":1,"updated_at":1406639679899,"updated_by":1},{"id":10,"uuid":"b009d5f2-7092-4809-84d5-0cb9246a9fb8","key":"defaultLang","value":"en_US","type":"blog","created_at":1406505860691,"created_by":1,"updated_at":1406639679900,"updated_by":1},{"id":11,"uuid":"43f48fb2-0df5-45d8-bff3-ce76ca862627","key":"postsPerPage","value":"6","type":"blog","created_at":1406505860692,"created_by":1,"updated_at":1406639679901,"updated_by":1},{"id":12,"uuid":"82f0eac6-ceeb-4f1f-bbe0-ab1d7cc6c459","key":"forceI18n","value":"true","type":"blog","created_at":1406505860692,"created_by":1,"updated_at":1406639679901,"updated_by":1},{"id":13,"uuid":"56d26b23-d6c4-4f21-8c98-69fc44982750","key":"permalinks","value":"/:slug/","type":"blog","created_at":1406505860693,"created_by":1,"updated_at":1406639679902,"updated_by":1},{"id":14,"uuid":"b4786399-f948-4fbc-b377-500b376b842d","key":"activeTheme","value":"casper","type":"theme","created_at":1406505860693,"created_by":1,"updated_at":1406639679903,"updated_by":1},{"id":15,"uuid":"cc433ebb-4076-4496-8715-e9d4aae0d533","key":"activeApps","value":"[]","type":"app","created_at":1406505860693,"created_by":1,"updated_at":1406639679904,"updated_by":1},{"id":16,"uuid":"16b011d5-5011-4167-9a3b-f90b7baf7858","key":"installedApps","value":"[]","type":"app","created_at":1406505860694,"created_by":1,"updated_at":1424740331310,"updated_by":1}],"tags":[{"id":1,"uuid":"24344333-6caa-4c6f-9032-8d85ca7dbc87","name":"Getting Started","slug":"getting-started","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1406505860651,"created_by":1,"updated_at":1406505860651,"updated_by":1}],"posts_tags":[]}}